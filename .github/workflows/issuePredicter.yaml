name: ML.NET Issue Predicter
on: 
  issues:
    types: [opened,edited]
jobs: 
  issuePredicterType:
    name: ML.NET Issue Predicter
    runs-on: ubuntu-latest
    env:
      #The 'analysis_response' variable is used to store the script response on step one, 
      #and then checked on step two to know if adding the label and comment is necessary.
      #The initial 'undefined' value will be overridden when the script runs.
      analysis_response: undefined
      #The 'parsed_issue_body' variable is used to store the parsed issue body (removing some sections of the body like Stack Trace)
      parsed_issue_body: undefined
      #The 'issue_json_string' variable is used to store in a json string the parsed info of the issue body
      issue_json_string: undefined
      #The 'is_wish_list' variable is used to store the value returned by the IssuesTypePredicter project
      is_wish_list: undefined
      #template file name
      template: "ISSUE_TEMPLATE.md"
      #amount of sections from the template that can be missing information for the issue to still be considered complete
      acceptable_missing_info: 1
    steps:
      - uses: actions/checkout@v2
      - name: Remove conflicting chars
        uses: frabert/replace-string-action@v1.2
        id: remove_quotations
        with:
          pattern: "\""
          string: ${{ github.event.issue.body }}
          replace-with: '-'
      - name: Check Information
        id: check-info
        run: |
          ls -la
          echo "analysis_response=$(pwsh .\\.github\\scripts\\issue_analyzer.ps1 "${{ env.template }}" "${{ steps.remove_quotations.outputs.replaced }}" "${{ env.acceptable_missing_info }}" )" >> $GITHUB_ENV
      - name: Clean Issue Body
        if: env.analysis_response == 'Valid'
        id: clean-issue-body
        run: |
          echo "parsed_issue_body="$(pwsh  .\\.github\\scripts\\issue_body_cleaner.ps1 "${{ steps.remove_quotations.outputs.replaced }}" )"" >> $GITHUB_ENV
      - name: Create Issue JSON String
        if: env.analysis_response == 'Valid'
        id: create-issue-json
        run: |
          mkdir IssuesTypePredicter
          echo "issue_json_string="$(pwsh  .\\.github\\scripts\\get_issue_json_body.ps1 "${{ github.event.issue.number }}" "${{ github.event.issue.title }}" "${{env.parsed_issue_body}}" )""  >> $GITHUB_ENV
      - name: Checkout IssuesTypePredicter
        if: env.analysis_response == 'Valid'
        uses: actions/checkout@v2
        with:
          repository: DynamoDS/IssuesTypePredicter
          path: IssuesTypePredicter
      - name: Build Issues Type Predicter 
        if: env.analysis_response == 'Valid'
        run: | 
          dotnet build ./IssuesTypePredicter/IssuesTypePredicter.sln --configuration Release
          cp ./IssuesTypePredicter/IssuesTypePredicterML.ConsoleApp/bin/Release/netcoreapp3.1/MLModel.zip .
      - name: Run Issues Type Predicter
        if: env.analysis_response == 'Valid'
        run: | 
          echo "is_wish_list="$(dotnet run -p ./IssuesTypePredicter/IssuesTypePredicterML.ConsoleApp/IssuesTypePredicterML.ConsoleApp.csproj -v q "${{env.issue_json_string}}")"" >> $GITHUB_ENV
      - name: Label Wishlist
        if: contains(env.is_wish_list,'IsWishlist:1') && env.analysis_response == 'Valid'
        run: |
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -d '{"labels": ["Wishlist"]}' ${{ github.event.issue.url }}/labels
      - name: Label NotMLEvaluated
        if: env.analysis_response != 'Valid' || env.issue_json_string == ''
        run: |
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -d '{"labels": ["NotMLEvaluated"]}' ${{ github.event.issue.url }}/labels
    
