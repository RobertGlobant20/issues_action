name: Check for missing information
on: 
  issues:
    types: [opened,edited]
jobs: 
  checkIssueInformation:
    name: Check for missing information
    runs-on: ubuntu-latest
    env:
      #The 'analysis_response' variable is used to store the script response on step one, 
      #and then checked on step two to know if adding the label and comment is necessary.
      #The initial 'undefined' value will be overridden when the script runs.
      analysis_response: undefined
      parsed_issue_body: undefined
      issue_json_string: undefined
      #issue_coment holds the comment format, while the missing information will be provided by analysis_response
      issue_comment: "This issue is missing information. Please, make sure to fill in all the necessary fields:"
      #template file name
      template: "ISSUE_TEMPLATE.md"
      #label to tag the issue with if its missing information
      issue_label: need more info
      #amount of sections from the template that can be missing information for the issue to still be considered complete
      acceptable_missing_info: 1
    steps:
      - uses: actions/checkout@v2
      - name: Remove conflicting chars
        uses: frabert/replace-string-action@v1.2
        id: remove_quotations
        with:
          pattern: "\""
          string: ${{ github.event.issue.body }}
          replace-with: '-'
      - name: Check Information
        id: check-info
        run: |
          ls -la
          echo "analysis_response=$(pwsh .\\.github\\scripts\\issue_analyzer.ps1 "${{ env.template }}" "${{ steps.remove_quotations.outputs.replaced }}" "${{ env.acceptable_missing_info }}" )" >> $GITHUB_ENV
      - name: Label and comment issue
        if: env.analysis_response != 'Valid'
        run: |
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -d '{"labels": ["${{env.issue_label}}"]}' ${{ github.event.issue.url }}/labels
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -d '{"body": "${{env.issue_comment}}${{env.analysis_response}}."}' ${{ github.event.issue.url }}/comments
      - name: Unlabel updated issue
        if: env.analysis_response == 'Valid'
        run: |
          echo urldecode ${{env.issue_label}}
          curl -v -u admin:${{ secrets.GITHUB_TOKEN }} -X DELETE ${{ github.event.issue.url }}/labels/$(echo -ne "${{env.issue_label}}" | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g')
      - name: Clean Issue Body
        id: clean-issue-body
        run: |
          echo "parsed_issue_body="$(pwsh  .\\.github\\scripts\\issue_body_cleaner.ps1 "${{ steps.remove_quotations.outputs.replaced }}" )"" >> $GITHUB_ENV
      - name: Create IssuesTypePredicter folder
        run: |
          mkdir IssuesTypePredicter
      - name: Create Issue JSON String
        id: create-issue-json
        run: |
          echo "issue_json_string="$(pwsh  .\\.github\\scripts\\get_issue_json_body.ps1 "${{ github.event.issue.number }}" "${{ github.event.issue.title }}" "${{env.parsed_issue_body}}" )""  >> $GITHUB_ENV
      - name: Checkout IssuesTypePredicter
        uses: actions/checkout@v2
        with:
          repository: RobertGlobant20/IssuesTypePredicter
          path: IssuesTypePredicter
      - name: Get Local Machine Information
        run: |
          pwd
          ls -lR IssuesTypePredicter
      - name: Replace Special Chars
        uses: frabert/replace-string-action@v1.2
        id: replace_special_chars
        with:
          pattern: "\""
          string: "\"${{env.issue_json_string}}\""
          replace-with: '\\\"'
      - name: Run Issues Type Predicter
        env:
          issue_json: "{\"Number\":23,\"Title\":\"Testingtitle\",\"Description\":\"TestingDescription\"}"
        run: | 
          cd "./IssuesTypePredicter/IssuesTypePredicterML.Model/"
          dotnet restore
          dotnet build
          cd "../IssuesTypePredicterML.ConsoleApp/"
          dotnet run "${{ env.issue_json }}"
    
